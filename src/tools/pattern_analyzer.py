import numpy as np
import pandas as pd
import ccxt
import tensorflow as tf

# --- CONFIGURA√á√ÉO E CARREGAMENTO DO MODELO ---
# Esta parte roda uma vez quando o m√≥dulo √© importado
try:
    MODELO_DE_PADROES = tf.keras.models.load_model('data/models/melhor_modelo.keras') # Ajustei o caminho
    MAPA_ETIQUETAS = {
        0: 'Ombro-Cabe√ßa-Ombro', 1: 'Topo Duplo', 2: 'Sem Padr√£o',
        3: 'Bandeira de Alta', 4: 'Bandeira de Baixa'
    }
    print("‚úÖ [Pattern Analyzer] Modelo de reconhecimento de padr√µes carregado.")
except Exception as e:
    print(f"üö® [Pattern Analyzer] Erro Cr√≠tico: N√£o foi poss√≠vel carregar o modelo.")
    print(f"   Erro: {e}")
    # Em uma aplica√ß√£o real, voc√™ poderia decidir se quer parar o programa ou continuar sem a ferramenta.
    MODELO_DE_PADROES = None


# --- A FERRAMENTA ESPECIALISTA ---

def analisar_padrao_grafico(ticker: str, timeframe: str = '1d', limit: int = 100) -> str:
    """
    Analisa os dados de mercado de uma criptomoeda para identificar padr√µes gr√°ficos t√©cnicos.
    Use esta fun√ß√£o sempre que o usu√°rio pedir para 'analisar um gr√°fico', 'verificar padr√µes' 
    ou 'procurar por forma√ß√µes' em um ativo.
    """
    print(f"\n[üõ†Ô∏è Ferramenta 'analisar_padrao_grafico' ativada para {ticker}]")
    
    if MODELO_DE_PADROES is None:
        return "Erro: O modelo de an√°lise de padr√µes n√£o est√° dispon√≠vel."

    # Busca dados reais com os par√¢metros din√¢micos
    print(f"Buscando dados para {ticker}...")
    try:
        exchange = ccxt.binance()
        ohlcv = exchange.fetch_ohlcv(ticker, timeframe, limit=limit)
        if len(ohlcv) < limit:
            return f"Erro: Dados insuficientes ({len(ohlcv)} de {limit} velas) para {ticker} no timeframe {timeframe}."
        
        # Seleciona apenas os pre√ßos de fechamento
        dados_reais = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])['close'].values
        print("Dados obtidos com sucesso.")
    except Exception as e:
        return f"Erro ao buscar dados na exchange: {e}"

    # Prepara os dados (Normaliza√ß√£o Min-Max)
    print("Normalizando dados para o modelo...")
    min_val = np.min(dados_reais)
    max_val = np.max(dados_reais)
    
    # Evita divis√£o por zero se todos os pre√ßos forem iguais
    if (max_val - min_val) == 0:
        return f"N√£o foi poss√≠vel analisar {ticker}: os pre√ßos no per√≠odo s√£o constantes."

    dados_normalizados = (dados_reais - min_val) / (max_val - min_val)
    
    # Prepara o formato para o modelo LSTM: (1, timesteps, features)
    dados_para_previsao = dados_normalizados.reshape(1, limit, 1)

    # Faz a previs√£o com o modelo treinado
    print("Analisando com o modelo de padr√µes...")
    previsao = MODELO_DE_PADROES.predict(dados_para_previsao)
    classe_prevista = np.argmax(previsao[0])
    nome_padrao_previsto = MAPA_ETIQUETAS.get(classe_prevista, "Padr√£o Desconhecido")
    confianca = previsao[0][classe_prevista] * 100
    
    resultado_tecnico = f"An√°lise para {ticker} ({timeframe}, ultimas {limit} velas): Padr√£o detectado = '{nome_padrao_previsto}' (Confian√ßa: {confianca:.2f}%)."
    print(f"[‚úÖ Resultado da ferramenta]: {resultado_tecnico}")
    return resultado_tecnico


# --- BLOCO DE TESTE PARA EXECU√á√ÉO DIRETA DO ARQUIVO ---
if __name__ == "__main__":
    """
    Este bloco s√≥ √© executado quando voc√™ roda 'python pattern_analyzer.py'
    diretamente no terminal. Ele serve para testar a fun√ß√£o acima.
    """
    print("\n--- INICIANDO TESTES DO M√ìDULO DE AN√ÅLISE DE PADR√ïES ---")
    
    # Teste 1: BTC no gr√°fico di√°rio
    resultado_btc = analisar_padrao_grafico(ticker='BTC/USDT', timeframe='1d', limit=100)
    print("-" * 50)

    # Teste 2: ETH no gr√°fico de 4 horas com mais dados
    resultado_eth = analisar_padrao_grafico(ticker='ETH/USDT', timeframe='4h', limit=120)
    print("-" * 50)

    # Teste 3: Ativo que pode n√£o existir para testar o erro
    resultado_erro = analisar_padrao_grafico(ticker='FAKECOIN/USDT')
    print("-" * 50)